import os
import tempfile
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters, ContextTypes
import google.generativeai as genai
import pandas as pd

# === 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = "ENTER YOUR TG TOKEN"
GEMINI_API_KEY = "ENTER YOUR GEMINI API KEY"
DATABASE_FILE = "sounddefbase.xlsx"  # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.5-flash")

# === 2. –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def load_database():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ–º–æ–∫ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    try:
        df = pd.read_excel(DATABASE_FILE)
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - —Å–∏–º–ø—Ç–æ–º—ã, –≤—Ç–æ—Ä–æ–π - –ø–æ–ª–æ–º–∫–∏
        df.columns = ['—Å–∏–º–ø—Ç–æ–º—ã', '–ø–æ–ª–æ–º–∫–∞']
        return df
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
database = load_database()

def create_diagnosis_prompt(database_df):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Gemini"""
    if database_df is None or database_df.empty:
        return None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    db_text = "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ–º–æ–∫ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π —Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤:\n\n"
    for idx, row in database_df.iterrows():
        db_text += f"{idx+1}. –°–∏–º–ø—Ç–æ–º—ã: {row['—Å–∏–º–ø—Ç–æ–º—ã']}\n   –ü–æ–ª–æ–º–∫–∞: {row['–ø–æ–ª–æ–º–∫–∞']}\n\n"
    
    prompt = f"""{db_text}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª –¥–≤–∏–≥–∞—Ç–µ–ª—è —Ç—Ä–∞–∫—Ç–æ—Ä–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —Å–∏–º–ø—Ç–æ–º—ã –ø–æ –∑–≤—É–∫—É.

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã—à–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–æ–º–∫–∏. 
–°–æ–ø–æ—Å—Ç–∞–≤—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã —Å —Å–∏–º–ø—Ç–æ–º–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ–ª–æ–º–∫—É.

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–±–ª–æ–Ω—É:

–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:
[–û–ø–∏—à–∏ —á—Ç–æ —Ç—ã —Å–ª—ã—à–∏—à—å –≤ –∑–≤—É–∫–µ: —Å—Ç—É–∫–∏, —à—É–º—ã, –Ω–µ—Ä–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏ —Ç.–¥.]

–î–∏–∞–≥–Ω–æ–∑:
[–£–∫–∞–∂–∏ –ø–æ–ª–æ–º–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã—è–≤–ª–µ–Ω–Ω—ã–º —Å–∏–º–ø—Ç–æ–º–∞–º]

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
[–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–æ–ª–æ–º–∫–∏]

–ï—Å–ª–∏ —Å–∏–º–ø—Ç–æ–º—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø–∏—à–∏:
**–î–∏–∞–≥–Ω–æ–∑:** –°–∏–º–ø—Ç–æ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ï—Å–ª–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –Ω–µ—Ç –∑–≤—É–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏–ª–∏ —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –∑–≤—É–∫ –¥–≤–∏–≥–∞—Ç–µ–ª—è –°–û–û–ë–©–ò –ß–¢–û –ó–í–£–ö –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢
"""
    return prompt


# === 3. –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status = "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞" if database is not None else "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üöú —Å —Ä–∞–±–æ—Ç–æ–π –¥–≤–∏–≥–∞—Ç–µ–ª—è —Ç—Ä–∞–∫—Ç–æ—Ä–∞, "
        f"–∞ —è –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n{status}"
    )


# === 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ ===
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    voice = update.message.voice
    if not voice:
        await update.message.reply_text("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    if database is None:
        await update.message.reply_text(
            "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –±–∞–∑–∞.xlsx"
        )
        return

    file = await context.bot.get_file(voice.file_id)
    ogg_path = tempfile.mktemp(suffix=".ogg")
    await file.download_to_drive(ogg_path)

    try:
        await update.message.reply_text("üéß –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–≤—É–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        diagnosis_prompt = create_diagnosis_prompt(database)
        
        if not diagnosis_prompt:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
            return

        # === –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ Gemini ===
        with open(ogg_path, "rb") as audio_file:
            audio_data = audio_file.read()
            
            response = model.generate_content([
                diagnosis_prompt,
                {
                    "mime_type": "audio/ogg",
                    "data": audio_data
                }
            ])

        result_text = response.text.strip()
        await update.message.reply_text(result_text)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")

    finally:
        if os.path.exists(ogg_path):
            os.remove(ogg_path)


# === 5. –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
async def show_database(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if database is None:
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return
    
    db_text = "üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ–º–æ–∫:\n\n"
    for idx, row in database.iterrows():
        db_text += f"{idx+1}. {row['—Å–∏–º–ø—Ç–æ–º—ã']}\n   ‚Üí {row['–ø–æ–ª–æ–º–∫–∞']}\n\n"
    
    # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    if len(db_text) > 4000:
        db_text = db_text[:4000] + "\n\n... (–±–∞–∑–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è, –ø–æ–∫–∞–∑–∞–Ω–∞ —á–∞—Å—Ç—å)"
    
    await update.message.reply_text(db_text)


# === 6. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    if database is None:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª '–±–∞–∑–∞.xlsx' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
    else:
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(database)} –∑–∞–ø–∏—Å–µ–π")
    
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("database", show_database))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == "__main__":
    main()
